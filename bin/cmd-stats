#!/bin/zsh

export LC_ALL=C

# 禁用所有互動功能和 hook
setopt no_prompt_cr no_prompt_sp
unsetopt xtrace
DISABLE_AUTO_TITLE=true

# 清空所有 hook 函數
typeset -g precmd_functions=()
typeset -g preexec_functions=()
typeset -g chpwd_functions=()

# 載入 shell 配置以獲取 alias（抑制所有輸出）
if [[ -f ~/.zshrc ]]; then
    source ~/.zshrc >/dev/null 2>&1
fi

# 再次清空 hook（以防 .zshrc 重新設置）
typeset -g precmd_functions=()
typeset -g preexec_functions=()
typeset -g chpwd_functions=()

# 先获取命令统计
cmd_stats=$(strings ~/.zsh_history | cut -d';' -f2- | \
    # 移除開頭的環境變數設定（VAR=value 形式）
    sed 's/^[A-Z_][A-Z0-9_]*=[^ ]* *//' | \
    sed 's/^[A-Z_][A-Z0-9_]*=[^ ]* *//' | \
    # 過濾掉絕對路徑開頭的命令
    grep -v '^/' | \
    # 過濾掉相對路徑腳本
    grep -v '^\.\.' | \
    grep -v '^\.\/' | \
    # 過濾掉 Vim 命令
    grep -v '^:' | \
    # 過濾掉註解
    grep -v '^#' | \
    # 過濾掉 HTTP 請求行
    grep -v '^GET ' | \
    grep -v '^POST ' | \
    grep -v '^PUT ' | \
    grep -v '^DELETE ' | \
    grep -v '^PATCH ' | \
    grep -v '^Host:' | \
    grep -v '^Content-' | \
    grep -v '^Authorization:' | \
    # 過濾掉 Python traceback 等錯誤訊息
    grep -v '^File ' | \
    grep -v '^Traceback' | \
    grep -v '^During ' | \
    grep -v '^The ' | \
    grep -v '^  ' | \
    # 過濾掉包含特殊字元的行
    grep -v '[{}()\[\]<>|&;"]' | \
    # 過濾掉包含逗號的片段（通常是數據或列表）
    grep -v ',' | \
    # 提取命令和第一個 subcommand（如果存在）
    awk '{
        cmd = $1
        # 如果第二個參數存在且不是選項（不以 - 開頭）且不包含 =
        if ($2 != "" && $2 !~ /^-/ && $2 !~ /=/ && $2 !~ /^\//) {
            cmd = cmd " " $2
        }
        print cmd
    }' | \
    grep -v '^$' | \
    grep -v '^--' | \
    grep -v '^-' | \
    grep -v '=' | \
    grep -v '^[0-9]' | \
    # 只保留合法的命令格式
    grep '^[a-z][a-zA-Z0-9_-]*' | \
    sed 's/;$//' | \
    sort | uniq -c | sort -rn)

# 输出表头
printf "%-6s %-20s %-50s %s\n" "次數" "命令" "原始命令/Alias" "說明"
printf "%s\n" "$(printf '=%.0s' {1..130})"

# 处理每个命令
echo "$cmd_stats" | while read count cmd; do
    [ -z "$cmd" ] && continue

    # 過濾明顯不是命令的內容
    case "$cmd" in
        # Python/程式關鍵字和變數
        await|return|raise|yield|then|else|done|fi|for|if|while|do) continue ;;
        result|response|data|event|url|path|value|key|name|type) continue ;;
        raw_response|inspection_result|orig_date) continue ;;

        # 測試名稱
        test_*) continue ;;

        # 套件名稱
        *-stubs|*-dev|*-test) continue ;;

        # 函數名稱
        show_*) continue ;;
    esac

    # 跳過太短的單字母命令（除了常用的）
    if [ ${#cmd} -eq 1 ]; then
        case "$cmd" in
            w|q|m|n|g) ;;
            *) continue ;;
        esac
    fi

    # 獲取 alias 定義
    alias_def=$(alias "$cmd" 2>/dev/null | sed "s/^[^=]*=//" | sed "s/^'//" | sed "s/'$//")

    # 中文描述
    case "$cmd" in
        cd) desc="切換目錄" ;;
        nvim) desc="Neovim 文字編輯器" ;;
        make) desc="建置工具" ;;
        python) desc="Python 直譯器" ;;
        git) desc="版本控制系統" ;;
        claude) desc="Claude Code CLI" ;;
        poetry) desc="Python 套件管理器" ;;
        pip) desc="Python 套件安裝工具" ;;
        "pip install") desc="安裝 Python 套件" ;;
        "pip list") desc="列出已安裝套件" ;;
        "pip show") desc="顯示套件資訊" ;;
        ls) desc="列出檔案" ;;
        lsd) desc="現代化的 ls 工具" ;;
        locust) desc="效能測試工具" ;;
        tig) desc="Git 文字介面" ;;
        code) desc="VS Code 編輯器" ;;
        curl) desc="HTTP 客戶端" ;;
        brew) desc="macOS 套件管理器" ;;
        "brew install") desc="安裝套件" ;;
        "brew update") desc="更新 Homebrew" ;;
        "brew upgrade") desc="升級套件" ;;
        "brew list") desc="列出已安裝套件" ;;
        rm) desc="刪除檔案/目錄" ;;
        npm) desc="Node.js 套件管理器" ;;
        "npm install") desc="安裝 npm 套件" ;;
        "npm run") desc="執行 npm 腳本" ;;
        "npm start") desc="啟動應用程式" ;;
        pytest) desc="Python 測試框架" ;;
        docker) desc="容器管理工具" ;;
        "docker build") desc="建置 Docker 映像" ;;
        "docker run") desc="執行容器" ;;
        "docker ps") desc="列出執行中容器" ;;
        "docker compose") desc="Docker Compose 工具" ;;
        "docker exec") desc="在容器中執行命令" ;;
        "docker logs") desc="查看容器日誌" ;;
        "docker stop") desc="停止容器" ;;
        "docker rm") desc="刪除容器" ;;
        tail) desc="顯示檔案尾部" ;;
        cat) desc="顯示檔案內容" ;;
        tree) desc="樹狀顯示目錄結構" ;;
        pyenv) desc="Python 版本管理器" ;;
        "pyenv install") desc="安裝 Python 版本" ;;
        "pyenv global") desc="設定全域 Python 版本" ;;
        "pyenv local") desc="設定本地 Python 版本" ;;
        btop) desc="系統資源監控工具" ;;
        sudo) desc="以管理員權限執行" ;;
        echo) desc="輸出文字" ;;
        which) desc="查找命令位置" ;;
        gcloud) desc="Google Cloud CLI" ;;
        source) desc="執行腳本並載入環境" ;;
        uv) desc="快速 Python 套件管理器" ;;
        "uv pip") desc="uv pip 套件管理" ;;
        "uv venv") desc="建立虛擬環境" ;;
        kitty) desc="終端模擬器" ;;
        history) desc="顯示命令歷史" ;;
        kubectl) desc="Kubernetes 管理工具" ;;
        "kubectl get") desc="取得 K8s 資源" ;;
        "kubectl apply") desc="套用 K8s 配置" ;;
        "kubectl delete") desc="刪除 K8s 資源" ;;
        ps) desc="顯示進程狀態" ;;
        htop) desc="互動式進程監控" ;;
        gitk) desc="Git 圖形介面" ;;
        mkdir) desc="建立目錄" ;;
        psql) desc="PostgreSQL 客戶端" ;;
        black) desc="Python 程式碼格式化工具" ;;
        python3) desc="Python 3 直譯器" ;;
        ping) desc="網路連線測試" ;;
        lazygit) desc="Git 終端 UI" ;;
        kill) desc="終止進程" ;;
        fzf) desc="模糊搜尋工具" ;;
        bat) desc="現代化的 cat 工具" ;;
        export) desc="設定環境變數" ;;
        node) desc="Node.js 執行環境" ;;
        du) desc="磁碟使用量" ;;
        chmod) desc="修改檔案權限" ;;
        cp) desc="複製檔案" ;;
        mv) desc="移動/重新命名檔案" ;;
        clear) desc="清除終端畫面" ;;
        pnpm) desc="快速的 npm 替代品" ;;
        ngrok) desc="內網穿透工具" ;;
        lsof) desc="列出開啟的檔案" ;;
        touch) desc="建立空檔案或更新時間戳" ;;
        pwd) desc="顯示當前目錄" ;;
        rg) desc="ripgrep 快速搜尋工具" ;;
        jq) desc="JSON 處理工具" ;;
        tmux) desc="終端多工器" ;;
        open) desc="開啟檔案或應用程式" ;;
        vim) desc="Vi 改進版編輯器" ;;
        exec) desc="執行命令" ;;
        sh) desc="Bourne Shell" ;;
        zsh) desc="Z Shell" ;;
        bash) desc="Bourne Again Shell" ;;
        gunicorn) desc="Python WSGI HTTP 伺服器" ;;
        uvicorn) desc="Python ASGI 伺服器" ;;
        celery) desc="分散式任務佇列" ;;
        grep) desc="文字搜尋" ;;
        find) desc="搜尋檔案" ;;
        sed) desc="串流編輯器" ;;
        awk) desc="文字處理工具" ;;

        # Git sub-commands
        "git status") desc="查看 Git 狀態" ;;
        "git add") desc="加入變更到暫存區" ;;
        "git commit") desc="提交變更" ;;
        "git push") desc="推送到遠端" ;;
        "git pull") desc="拉取更新" ;;
        "git clone") desc="複製倉庫" ;;
        "git checkout") desc="檢出分支/檔案" ;;
        "git branch") desc="分支操作" ;;
        "git merge") desc="合併分支" ;;
        "git rebase") desc="變基操作" ;;
        "git log") desc="查看提交歷史" ;;
        "git diff") desc="顯示差異" ;;
        "git stash") desc="暫存變更" ;;
        "git fetch") desc="取得遠端更新" ;;
        "git remote") desc="遠端倉庫管理" ;;
        "git reset") desc="重置變更" ;;
        "git restore") desc="還原檔案" ;;
        "git show") desc="顯示提交內容" ;;
        "git tag") desc="標籤管理" ;;
        "git switch") desc="切換分支" ;;

        # Git aliases
        gaa) desc="加入所有變更" ;;
        gsw) desc="切換分支" ;;
        gco) desc="檢出分支/檔案" ;;
        gcmsg) desc="提交變更（附訊息）" ;;
        gst) desc="查看 Git 狀態" ;;
        gp) desc="推送到遠端" ;;
        gpsup) desc="推送並設定上游分支" ;;
        gstu) desc="暫存包含未追蹤檔案" ;;
        gstp) desc="恢復最近的暫存" ;;
        gpf) desc="安全的強制推送" ;;
        gfa) desc="取得所有遠端更新" ;;
        gba) desc="列出所有分支" ;;
        ga) desc="加入變更到暫存區" ;;
        gb) desc="Git 分支操作" ;;
        gc) desc="提交變更" ;;
        gd) desc="顯示差異" ;;
        gl) desc="拉取更新" ;;
        gm) desc="合併分支" ;;
        grb) desc="變基操作" ;;
        gsta) desc="暫存變更" ;;
        gstaa) desc="套用暫存" ;;
        gstl) desc="列出暫存" ;;
        gstd) desc="刪除暫存" ;;
        gss) desc="簡短狀態顯示" ;;
        gdh) desc="顯示 HEAD 差異" ;;
        gcp) desc="Cherry-pick 提交" ;;
        g) desc="git 的縮寫" ;;

        # 自定義 aliases
        cdpy) desc="切換到 Python 虛擬環境目錄" ;;
        mkvenv) desc="建立 Python 虛擬環境" ;;
        rmvenv) desc="刪除 Python 虛擬環境" ;;
        rmpyc) desc="刪除 Python 編譯檔案" ;;
        rmemptydir) desc="刪除空目錄" ;;
        tiga) desc="Tig 顯示所有分支" ;;
        tigq) desc="Tig 快速模式" ;;
        localip) desc="顯示本機 IP 位址" ;;

        # 工具
        zinit|zi|zini|zpl|zplg) desc="Zsh 插件管理器" ;;
        autoflake) desc="移除未使用的 Python import" ;;
        pyright) desc="Python 靜態類型檢查器" ;;
        prettierd) desc="快速的程式碼格式化工具" ;;
        cspell) desc="拼寫檢查工具" ;;
        la) desc="列出所有檔案（包含隱藏檔）" ;;
        hatch) desc="Python 專案管理工具" ;;
        bun) desc="快速的 JavaScript 執行環境" ;;
        cargo) desc="Rust 套件管理器" ;;
        rustc) desc="Rust 編譯器" ;;
        rust) desc="Rust 程式語言" ;;
        fd) desc="現代化的 find 替代品" ;;
        ln) desc="建立連結" ;;
        isort) desc="Python import 排序工具" ;;
        ruff) desc="快速的 Python linter" ;;
        sqlfluff) desc="SQL linter 工具" ;;
        pylint) desc="Python 程式碼檢查工具" ;;
        printenv) desc="顯示環境變數" ;;
        dircolors|gdircolors) desc="設定 ls 顏色" ;;
        pet) desc="命令片段管理器" ;;
        glances) desc="系統監控工具" ;;
        gotop) desc="終端系統監控" ;;
        atop) desc="進階系統監控" ;;
        bopt) desc="系統最佳化工具" ;;
        vmstat) desc="虛擬記憶體統計" ;;
        pstree) desc="顯示進程樹" ;;
        nvm) desc="Node.js 版本管理器" ;;
        yarn) desc="JavaScript 套件管理器" ;;
        ccusage) desc="Claude Code 使用統計" ;;
        figlet) desc="ASCII 藝術字產生器" ;;
        diffr) desc="差異顯示工具" ;;
        tput) desc="終端控制工具" ;;
        emulate) desc="模擬 Shell 環境" ;;
        clone) desc="複製專案" ;;
        install) desc="安裝軟體" ;;
        update) desc="更新軟體" ;;
        chat) desc="聊天工具" ;;
        cursor) desc="Cursor 編輯器" ;;
        printf) desc="格式化輸出" ;;
        print) desc="輸出文字" ;;
        perl) desc="Perl 程式語言" ;;
        pure) desc="Pure prompt 主題" ;;
        uvx) desc="執行 uv 套件" ;;
        nim) desc="Nim 程式語言" ;;
        uu) desc="未知工具" ;;
        pr) desc="Pull request 工具" ;;
        gh) desc="GitHub CLI" ;;
        git-gui) desc="Git 圖形介面工具" ;;
        fzf-tab) desc="FZF Tab 補全插件" ;;
        claude-monitor) desc="Claude 監控工具" ;;
        yt-dlp) desc="YouTube 下載工具" ;;

        # 可能的命令
        w) desc="顯示登入使用者" ;;
        n) desc="Node 版本管理" ;;
        m) desc="可能是自定義命令" ;;
        q|qq|qdd) desc="退出" ;;

        # 拼寫錯誤
        nviim|nvin) desc="nvim 輸入錯誤" ;;
        pyhton|pytho|pythobn) desc="python 輸入錯誤" ;;
        calude|claue) desc="claude 輸入錯誤" ;;
        mak) desc="make 輸入錯誤" ;;
        adfsdf) desc="隨機輸入" ;;

        *) desc="" ;;
    esac

    if [ -n "$alias_def" ]; then
        # 截斷過長的 alias 定義
        if [ ${#alias_def} -gt 50 ]; then
            alias_def="${alias_def:0:47}..."
        fi
        printf "%-6s %-20s %-50s %s\n" "$count" "$cmd" "$alias_def" "$desc"
    else
        printf "%-6s %-20s %-50s %s\n" "$count" "$cmd" "-" "$desc"
    fi
done
